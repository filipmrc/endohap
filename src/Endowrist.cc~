#include <endohap/Endowrist.h>

Endowrist::Endowrist(ros::NodeHandle n, ros::Rate r) :
		acTraj("davinci/p4_hand_controller/follow_joint_trajectory", true),
		roll_dz(&eff[0], &force.x, 0.14),
		clamp_dz(&eff[2], &force.y, 0.20)
{
	joint_sub = n.subscribe("/joint_states", 1, &Endowrist::callback, this);
	T = 0.02;

	pos.resize(4);
	last_pos.resize(4);
	eff.resize(4);
	vel.resize(4);
	force.x = 0; force.y = 0; force.z = 0;

	initializeModels();

}

void Endowrist::initializeModels()
{

	// initialize pitch model
	int order = 6; int inputs = 2; int outputs = 2;
	A_p.resize(order,order), B_p.resize(order,inputs), C_p.resize(outputs,order), x_p.resize(order,1), y_p.resize(outputs,1);


	// initialize yaw model
	order = 6; inputs = 1; outputs = 2;
	A_yaw.resize(order,order), B_yaw.resize(order,inputs), C_yaw.resize(outputs,order), x_yaw.resize(order,1), y_yaw.resize(outputs,1), Q_yaw.resize(inputs,inputs), R_yaw.resize(outputs,outputs);
	std::cout << "A" << std::endl;
	A_yaw <<    0.9804,    0.0851,    0.1636,    0.1836,    0.0759,    0.1819,
			   -0.0119,    0.6809,   -0.2967,    0.4604,   -0.4634,    0.1466,
			   -0.0012,    0.2670,    0.9193,    0.0268,   -0.2378,   -0.1622,
			   -0.0020,   -0.0913,    0.0933,    0.5568,    0.1060,   -0.3030,
			    0.0008,    0.0198,   -0.0275,    0.5082,    0.7115,   -0.3731,
			   -0.0003,   -0.0059,    0.0127,   -0.1328,    0.3285,    0.4622;

	B_yaw <<    -0.2150,   -1.2980,   -1.5127,    2.0888,   -1.2082,    1.7883;

	C_yaw <<     0.0594,   -0.6962,    0.0325,    0.4309,   -0.4352,    0.0929,
				-0.3510,    0.0089,    0.2817,    0.3199,    0.2157,    0.5793;

	Q_yaw << 10*10;

	R_yaw << 10*10/T, 0 ,0, (unsigned int)100000000*100000000/T;

	x_yaw << 0, 0, 0, 0, 0, 0;


	f_yaw.initializeFilter(A_yaw,B_yaw,C_yaw,Q_yaw,R_yaw,x_yaw);

	// initialize pitch model
	A_p <<      0.7103,    0.0434,   -0.0355,    0.0132,   -0.2814,   -0.0526,
			   -0.1182,    0.7772,   -0.2927,    0.0132,   -0.1175,   -0.0251,
			   -0.1123,    0.3975,    0.8981,   -0.0021,    0.0998,    0.0190,
			    0.0353,   -0.0225,    0.1096,    0.7840,   -0.0338,    0.0522,
			    0.1359,    0.2742,   -0.1973,    0.0354,    1.2126,    0.0524,
			    0.0417,   -0.1756,    0.3687,   -0.6837,   -0.2246,    1.1328;

	B_p <<      0.1515,   -0.1359,    0.5688,    0.0215,    0.5352,   -0.0572,
		        0.0411,    1.1757,   -2.3614,    0.0693,   -2.1150,    0.9214;

	C_p <<     -0.3151,   -0.1235,   -1.0113,    0.0274,   -0.0030,   -0.0090,
		        0.7458,   -1.7963,   -1.0502,  -10.7721,    0.9147,    2.1045;

	x_p << 0, 0, 0, 0, 0, 0;
}

void Endowrist::callback(sensor_msgs::JointState st)
{
	state = st;

	updateStates();

	forceEstimation();
}

void Endowrist::updateStates()
{
	// Physical motor angles Endowrist used in the dynamic model


	pos[0] = CONV_POS*state.position[0], pos[1] = CONV_POS*state.position[1],
    pos[2] = CONV_POS*state.position[3] , pos[3] = CONV_POS*state.position[4];

	vel[0] = CONV_POS*state.velocity[0], vel[1] = CONV_POS*state.velocity[1],
	vel[2] = CONV_POS*state.velocity[3], vel[3] = CONV_POS*state.velocity[4];

	// Efforts 
	eff[0] = state.effort[0], eff[1] = state.effort[1],
    eff[2] = state.effort[3], eff[3] = state.effort[4];

	//std::cout << pos[0] << " " << pos[1] << " " << pos[2] << " " << pos[3] << std::endl;
}

void Endowrist::forceEstimation()
{
	//	omni	joint		motor		joint_states
	//
	//	x 	pitch		3		eff[3]
	//	y 	clamp		1 & 4		eff[1] & eff[2]
	//	z 	roll		2		eff[0]
	MatrixXd yv(2,1), u1(1,1), u2(2,1),ye1(2,1), ye2(2,1), ye3(2,1), ye4(2,1);

	// yaw
	yv << vel[1], 0;
	u1 << -eff[1];
	ye1 = f_yaw.estimateOutput(yv,u1);
	yv << vel[2], 0;
	u1 << eff[2];
	ye4 = f_yaw.estimateOutput(yv,u1);
	if ((double(ye1(1)) > 0) && (double(ye4(1) > 0)))
	{
		force.y = deadzone(double (ye4(1) + ye1(1))/2,0.1);
	}
	else if ((double(ye1(1)) < 0) && (double(ye4(1) < 0)))
	{
		force.y = deadzone(double (ye4(1) + ye1(1))/2,0.1);
	}else
		force.y = 0;




	// pitch
	u2 << eff[3], pos[3];
	x_p = A_p*x_p + B_p*u2;
	y_p = C_p*x_p;
	force.z = y_p(1);


	// roll
	double m = 3;
	force.x = -m*eff[0];

	//apply the friction model
	//force.y = clamp_dz.run();
	//force.x = roll_dz.run();
	printf("force.x = %f,\tforce.y = %f,\tforce.z = %f\n",force.x,force.y,force.z);

}

void Endowrist::setJoints(std::vector<double> cmd)
{
	cmd.resize(5);

	control_msgs::FollowJointTrajectoryGoal goal;
	goal.trajectory.points.resize(1);
	goal.trajectory.points[0].positions.resize(5);

	char* args[5] =
	{ "p4_hand_roll", "p4_hand_pitch", "p4_instrument_slide",
			"p4_instrument_roll", "p4_instrument_pitch" };

	for (int i = 0; i < 5; i++)
	{
		goal.trajectory.joint_names.push_back(args[i]);
		goal.trajectory.points[0].time_from_start = ros::Duration(0.0001);
		goal.trajectory.points[0].positions[i] = cmd[i];
	}

	acTraj.sendGoal(goal);

	bool finished_before_timeout = acTraj.waitForResult(ros::Duration(10.0));

	if (finished_before_timeout)
	{
		//actionlib::SimpleClientGoalState state = acTraj.getState();
		//ROS_INFO("Action finished: %s", state.toString().c_str());
	}
	else
		ROS_INFO("Action did not finish before the time out.");
}


